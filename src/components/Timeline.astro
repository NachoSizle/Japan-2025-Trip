---
import DayCard from './DayCard.astro';
import FlightCard from './FlightCard.astro';
import ReturnFlightCard from './ReturnFlightCard.astro';
import WeatherWidget from './WeatherWidget.astro';
import itinerarioData from '../data/itinerario.json';

const { dias } = itinerarioData;

// Funci√≥n para calcular qu√© tarjetas mostrar seg√∫n la fecha actual
function getDaysToShow() {
  // Para testing, puedes cambiar esta l√≠nea para simular diferentes fechas:
  // const now = new Date('2025-08-10'); // Para probar antes del viaje
  // const now = new Date('2025-08-13'); // Para probar d√≠a de vuelo
  // const now = new Date('2025-08-16'); // Para probar durante el viaje
  // const now = new Date('2025-08-29'); // Para probar al final del viaje
  const now = new Date(); // Fecha actual del sistema
  
  const currentDate = now.toISOString().split('T')[0]; // YYYY-MM-DD format
  
  console.log('Fecha actual simulada:', currentDate); // Para debug
  
  // Fechas del viaje
  const flightDate = '2025-08-13'; // D√≠a del vuelo desde Espa√±a
  const tripStart = '2025-08-14'; // Llegada a Jap√≥n (d√≠a 1 del itinerario)
  const tripEnd = '2025-08-28'; // √öltimo d√≠a (d√≠a 15 del itinerario)
  
  // 1. Antes del 13 agosto: Solo tarjeta de vuelo
  if (currentDate < flightDate) {
    console.log('Antes del vuelo - solo tarjeta de vuelo');
    return [{
      dia: 0, // D√≠a especial para vuelo
      fecha: flightDate,
      titulo: 'Vuelo Espa√±a ‚Üí Jap√≥n',
      ciudad: 'En tr√°nsito',
      actividades: [],
      showFlightCard: true,
      showDayCard: false,
      showReturnFlightCard: false,
      isCurrentDay: false
    }];
  }
  
  // 2. 13 agosto: Tarjeta de vuelo + DayCard del d√≠a 1
  if (currentDate === flightDate) {
    console.log('D√≠a de vuelo - tarjeta de vuelo + d√≠a 1');
    const day1 = dias[0]; // Primer d√≠a del itinerario
    return [{
      dia: 0, // D√≠a especial para vuelo
      fecha: flightDate,
      titulo: 'Vuelo Espa√±a ‚Üí Jap√≥n',
      ciudad: 'En tr√°nsito',
      actividades: [],
      showFlightCard: true,
      showDayCard: false,
      showReturnFlightCard: false,
      isCurrentDay: true
    }, {
      ...day1,
      showFlightCard: false,
      showDayCard: true,
      showReturnFlightCard: false,
      isCurrentDay: false
    }];
  }
  
  // 3. 14-27 agosto: Solo la DayCard del d√≠a actual correspondiente
  if (currentDate >= tripStart && currentDate < tripEnd) {
    console.log('Durante el viaje - d√≠a actual');
    // Encontrar qu√© d√≠a del itinerario corresponde a la fecha actual
    const currentDay = dias.find(dia => dia.fecha === currentDate);
    
    if (currentDay) {
      console.log('D√≠a actual encontrado:', currentDay.dia);
      return [{
        ...currentDay,
        showFlightCard: false,
        showDayCard: true,
        showReturnFlightCard: false,
        isCurrentDay: true
      }];
    } else {
      // Si no hay d√≠a espec√≠fico para esta fecha, no mostrar nada
      console.log('No hay d√≠a espec√≠fico para esta fecha');
      return [];
    }
  }
  
  // 4. 28 agosto: DayCard del d√≠a 15 + tarjeta de vuelo de vuelta
  if (currentDate === tripEnd) {
    console.log('√öltimo d√≠a - d√≠a 15 + vuelo de vuelta');
    const lastDay = dias[dias.length - 1]; // √öltimo d√≠a del itinerario
    return [{
      ...lastDay,
      showFlightCard: false,
      showDayCard: true,
      showReturnFlightCard: false,
      isCurrentDay: true
    }, {
      dia: 999, // D√≠a especial para vuelo de vuelta
      fecha: tripEnd,
      titulo: 'Vuelo Jap√≥n ‚Üí Espa√±a',
      ciudad: 'En tr√°nsito',
      actividades: [],
      showFlightCard: false,
      showDayCard: false,
      showReturnFlightCard: true,
      isCurrentDay: false
    }];
  }
  
  // 5. Despu√©s del 28 agosto: No mostrar nada o mostrar resumen completo
  console.log('Despu√©s del viaje');
  return [];
}

const daysToShow = getDaysToShow();
---

<section id="itinerario" class="py-12 sm:py-16 md:py-20 timeline-section">
  <div class="container mx-auto px-2 sm:px-4">
    <!-- Widget de clima al inicio de la secci√≥n -->
    {daysToShow.length > 0 && daysToShow[0].ciudad && daysToShow[0].ciudad !== 'En tr√°nsito' && daysToShow[0].ciudad.trim() !== '' && (
      <div class="flex justify-center mb-6">
        <WeatherWidget city={daysToShow[0].ciudad} />
      </div>
    )}
    <!-- Header de la secci√≥n -->
    <div class="text-center mb-8 sm:mb-12 md:mb-16">
      <h2 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold font-poppins mb-3 sm:mb-4 md:mb-6 timeline-title">
        Itinerario
      </h2>
      <p class="text-base sm:text-lg md:text-xl timeline-subtitle max-w-3xl mx-auto mb-4 sm:mb-6 md:mb-8 px-2 sm:px-4">
        Explora d√≠a a d√≠a nuestra aventura por Jap√≥n, con opciones especiales para cel√≠acos en cada parada. Aqu√≠ ir√°n apareciendo las tarjetas de vuelo y actividades seg√∫n la fecha actual.
      </p>
    </div>

    <!-- Timeline principal optimizada para m√≥vil -->
    <div class="relative">      
      <!-- Tarjetas de d√≠as optimizadas para m√≥vil -->
      <div class="space-y-6 sm:space-y-8 md:space-y-12">
        {daysToShow.map((dia, index) => {
          // Usar type casting para acceder a las propiedades a√±adidas
          const diaExtended = dia as any;
          
          return (
            <div class="relative">              
              {/* Mostrar tarjeta de vuelo (ida) si corresponde */}
              {diaExtended.showFlightCard && (
                <div class="w-full max-w-lg mx-auto mb-6">
                  <FlightCard />
                  <div class="mt-2 transition-colors duration-300 text-center">
                    <span class="text-xs clickable-hint">
                      ‚úàÔ∏è Informaci√≥n del vuelo (pr√≥ximamente)
                    </span>
                  </div>
                </div>
              )}
              
              {/* Mostrar DayCard si corresponde */}
              {diaExtended.showDayCard && (
                <a href={`${import.meta.env.BASE_URL}/itinerario/${dia.dia}`} class="block group">
                  <!-- Tarjeta centrada -->
                  <div class="w-full max-w-lg mx-auto">
                    <DayCard 
                      day={dia.dia}
                      fecha={dia.fecha}
                      titulo={dia.titulo}
                      ciudad={dia.ciudad}
                      actividades={dia.actividades as any}
                    />
                    <!-- Indicador de que es clickeable -->
                    <div class="mt-2 transition-colors duration-300 text-center">
                      <span class="text-xs clickable-hint">
                        üëÜ Toca para ver detalles completos
                        {diaExtended.isCurrentDay && <span class="ml-2 text-yellow-400 font-bold">¬°HOY!</span>}
                      </span>
                    </div>
                  </div>
                </a>
              )}
              
              {/* Mostrar tarjeta de vuelo de vuelta si corresponde */}
              {diaExtended.showReturnFlightCard && (
                <div class="w-full max-w-lg mx-auto mt-6">
                  <ReturnFlightCard />
                  <div class="mt-2 transition-colors duration-300 text-center">
                    <span class="text-xs clickable-hint">
                      üõ¨ Informaci√≥n del vuelo de vuelta (pr√≥ximamente)
                    </span>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>

    <!-- Stats del viaje optimizadas para m√≥vil -->
    <div class="mt-8 sm:mt-12 md:mt-16 lg:mt-20 grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4 md:gap-6 lg:gap-8 text-center px-1">
      <div class="timeline-stat-card p-2 sm:p-4 md:p-6 rounded-lg sm:rounded-xl transition-all duration-300">
        <div class="stat-number text-lg sm:text-2xl md:text-3xl font-bold mb-1 sm:mb-2" style="color: #FF1493; text-shadow: 0 0 10px rgba(255, 20, 147, 0.5);">{itinerarioData.viaje.duracion_dias}</div>
        <div class="stat-label text-xs sm:text-sm">D√≠as totales</div>
      </div>
      <div class="timeline-stat-card p-2 sm:p-4 md:p-6 rounded-lg sm:rounded-xl transition-all duration-300">
        <div class="stat-number text-lg sm:text-2xl md:text-3xl font-bold mb-1 sm:mb-2" style="color: #FF6B6B; text-shadow: 0 0 10px rgba(255, 107, 107, 0.5);">{itinerarioData.viaje.ciudades_principales.length}</div>
        <div class="stat-label text-xs sm:text-sm">Ciudades</div>
      </div>
      <div class="timeline-stat-card p-2 sm:p-4 md:p-6 rounded-lg sm:rounded-xl transition-all duration-300">
        <div class="stat-number text-lg sm:text-2xl md:text-3xl font-bold mb-1 sm:mb-2" style="color: #FF0040; text-shadow: 0 0 10px rgba(255, 0, 64, 0.5);">
          {dias.reduce((total, dia) => total + dia.actividades.filter(a => (a as any).tipo === 'comida').length, 0)}
        </div>
        <div class="stat-label text-xs sm:text-sm">Experiencias gastron√≥micas</div>
      </div>
      <div class="timeline-stat-card p-2 sm:p-4 md:p-6 rounded-lg sm:rounded-xl transition-all duration-300 col-span-2 lg:col-span-1">
        <div class="stat-number text-lg sm:text-2xl md:text-3xl font-bold mb-1 sm:mb-2" style="color: #FF8A80; text-shadow: 0 0 10px rgba(255, 138, 128, 0.5);">
          {dias.reduce((total, dia) => total + dia.actividades.filter(a => (a as any).gluten_free).length, 0)}
        </div>
        <div class="stat-label text-xs sm:text-sm">Opciones GF</div>
      </div>
    </div>

    <!-- CTAs alineados en la misma fila - optimizado para m√≥vil -->
    <div class="text-center mt-8 sm:mt-12 md:mt-16 px-2 sm:px-4">
      <!-- Botones principales -->
      <div class="flex flex-col sm:flex-row justify-center items-center gap-4 sm:gap-6 lg:gap-8 mb-6">
        <!-- Bot√≥n para ver itinerario completo (primero) -->
        <a href={`${import.meta.env.BASE_URL}itinerario`} class="itinerario-complete-cta inline-flex items-center justify-center space-x-3 px-6 sm:px-8 lg:px-10 py-3 sm:py-4 lg:py-5 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 text-sm sm:text-base lg:text-lg shadow-2xl w-full sm:w-auto no-underline">
          <span class="text-lg sm:text-xl">üìÖ</span>
          <span class="whitespace-nowrap">Ver Itinerario Completo</span>
          <span class="text-lg sm:text-xl">üóæ</span>
        </a>
        
        <!-- Bot√≥n para ver gu√≠a sin gluten (segundo) -->
        <a href="#gluten-free" class="timeline-cta inline-flex items-center justify-center space-x-3 px-6 sm:px-8 lg:px-10 py-3 sm:py-4 lg:py-5 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 text-sm sm:text-base lg:text-lg shadow-2xl w-full sm:w-auto no-underline">
          <span class="text-lg sm:text-xl">üåæ</span>
          <span class="whitespace-nowrap">Ver Gu√≠a Sin Gluten</span>
          <span class="text-lg sm:text-xl">üö´</span>
        </a>
      </div>
      
      <!-- Descripci√≥n del itinerario completo -->
      <p class="text-xs sm:text-sm text-gray-400 max-w-2xl mx-auto">
        Explora todos los d√≠as del viaje con detalles completos de cada actividad y opciones especiales para cel√≠acos
      </p>
    </div>
  </div>
</section>

<style>
  /* Timeline Section */
  .timeline-section {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d1b3d 100%);
    position: relative;
  }
  
  :global(:global([data-theme="light"])) .timeline-section {
    background: linear-gradient(135deg, #FFE8E8 0%, #FFDDDD 100%) !important;
  }

  /* Timeline Title */
  .timeline-title {
    background: linear-gradient(135deg, #FF1493, #FF6B6B, #FF0040);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(255, 20, 147, 0.5);
  }

  /* Timeline Subtitle */
  .timeline-subtitle {
    color: rgba(255, 255, 255, 0.8);
  }
  
  /* ===== ESTILOS PARA MODO CLARO ===== */
  :global(:global([data-theme="light"])) .timeline-title {
    background: linear-gradient(135deg, #C41E3A, #DC143C, #8B0000) !important;
    -webkit-background-clip: text !important;
    background-clip: text !important;
    -webkit-text-fill-color: transparent !important;
    text-shadow: none !important;
  }
  
  :global(:global([data-theme="light"])) .timeline-subtitle {
    color: #2D1B1B !important;
    font-weight: 600;
    opacity: 0.95;
    text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);
  }

  /* Stats Cards */
  .timeline-stat-card {
    background: rgba(255, 20, 147, 0.1);
    border: 1px solid rgba(255, 20, 147, 0.3);
    backdrop-filter: blur(10px);
  }
  
  .timeline-stat-card:hover {
    border-color: rgba(255, 20, 147, 0.5);
    box-shadow: 0 8px 32px rgba(255, 20, 147, 0.2);
  }
  
  :global([data-theme="light"]) .timeline-stat-card {
    background: rgba(255, 20, 147, 0.05);
    border: 1px solid rgba(255, 20, 147, 0.2);
  }
  
  :global([data-theme="light"]) .timeline-stat-card:hover {
    background: rgba(255, 20, 147, 0.1);
    border-color: rgba(255, 20, 147, 0.4);
  }

  .stat-label {
    color: rgba(255, 255, 255, 0.7);
  }
  
  :global([data-theme="light"]) .stat-label {
    color: #2d2d2d !important;
    font-weight: 500;
  }

  /* CTA Button */
  .timeline-cta {
    background: linear-gradient(135deg, #FF6B6B, #FF1493);
    color: white;
    box-shadow: 0 8px 32px rgba(255, 20, 147, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }
  
  .timeline-cta:hover {
    box-shadow: 0 12px 40px rgba(255, 20, 147, 0.5);
    border-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.05) translateY(-2px);
  }

  /* Itinerario Complete CTA Button */
  .itinerario-complete-cta {
    background: linear-gradient(135deg, #FF1493, #FF0040, #8B0000);
    color: white;
    box-shadow: 0 8px 32px rgba(255, 20, 147, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }
  
  .itinerario-complete-cta:hover {
    box-shadow: 0 12px 40px rgba(255, 20, 147, 0.5);
    border-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.05) translateY(-2px);
  }
  
  :global([data-theme="light"]) .timeline-cta {
    background: linear-gradient(135deg, #FF6B6B, #DC143C);
    box-shadow: 0 8px 32px rgba(255, 107, 107, 0.3);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  :global([data-theme="light"]) .timeline-cta:hover {
    box-shadow: 0 12px 40px rgba(255, 107, 107, 0.4);
    border-color: rgba(255, 255, 255, 0.5);
  }
  
  :global([data-theme="light"]) .itinerario-complete-cta {
    background: linear-gradient(135deg, #DC143C, #8B0000, #4A0000);
    box-shadow: 0 8px 32px rgba(220, 20, 60, 0.3);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  :global([data-theme="light"]) .itinerario-complete-cta:hover {
    box-shadow: 0 12px 40px rgba(220, 20, 60, 0.4);
    border-color: rgba(255, 255, 255, 0.5);
  }

  /* No underline for CTA buttons */
  .no-underline {
    text-decoration: none !important;
  }
  
  .no-underline:hover {
    text-decoration: none !important;
  }

  /* Clickable Hint */
  .clickable-hint {
    color: rgba(255, 255, 255, 0.5);
  }
  
  .group-hover-indicator:hover .clickable-hint {
    color: #FF1493;
  }
  
  :global([data-theme="light"]) .clickable-hint {
    color: #4b5563 !important;
    font-weight: 500;
  }
  
  :global([data-theme="light"]) .group-hover-indicator:hover .clickable-hint {
    color: #FF1493;
  }
</style>
